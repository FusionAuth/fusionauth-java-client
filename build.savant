/*
 * Copyright (c) 2019, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
savantVersion = "1.0.0"

fusionauthJWTVersion = "3.6.0"
guavaVersion = "27.1.0-jre"
guiceVersion = "4.2.3"
jacksonVersion = "2.12.2"
jackson5Version = "2.4.8"
javaErrorVersion = "2.2.2"
restifyVersion = "3.7.2"
testngVersion = "7.3.0"

project(group: "io.fusionauth", name: "fusionauth-java-client", version: "1.99.0", licenses: ["ApacheV2_0"]) {
  workflow {
    standard()
  }

  publishWorkflow {
    subversion(repository: "http://svn.inversoft.org/savant")
  }

  dependencies {
    group(name: "provided") {
      dependency(id: "javax.servlet:servlet-api:3.1.0", skipCompatibilityCheck: true)
      dependency(id: "com.google.inject:guice:${guiceVersion}")
    }
    group(name: "compile") {
      dependency(id: "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
      dependency(id: "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
      dependency(id: "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
      dependency(id: "com.inversoft:jackson5:${jackson5Version}")
      dependency(id: "com.inversoft:java-error:${javaErrorVersion}")
      dependency(id: "com.inversoft:restify:${restifyVersion}")
      dependency(id: "io.fusionauth:fusionauth-jwt:${fusionauthJWTVersion}")
    }
    group(name: "test-compile") {
      dependency(id: "com.google.guava:guava:${guavaVersion}", skipCompatibilityCheck: true)
      dependency(id: "org.testng:testng:${testngVersion}")
    }
  }

  publications {
    standard()
  }
}

// Plugins
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:1.0.2")
java = loadPlugin(id: "org.savantbuild.plugin:java:1.2.0")
javaTestNG = loadPlugin(id: "org.savantbuild.plugin:java-testng:1.0.8")
file = loadPlugin(id: "org.savantbuild.plugin:file:1.0.2")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:1.0.1")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")

// Plugin settings
java.settings.javaVersion = "1.8"
javaTestNG.settings.javaVersion = "1.8"

target(name: "clean", description: "Cleans the project") {
  java.clean()
  file.prune(dir: "target") // clean the mvn directory so we release properly
}

target(name: "compile", description: "Compiles the project") {
  java.compile()
}

target(name: "jar", description: "JARs the project", dependsOn: ["compile"]) {
  java.jar()
}

target(name: "test", description: "Runs the project's tests", dependsOn: ["jar"]) {
  javaTestNG.test()
}

target(name: "doc", description: "Generate the project's JavaDoc", dependsOn: ["jar"]) {
  java.document()
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["jar"]) {
  dependency.integrate()
}

target(name: "list-unused-dependencies", description: "Lists the unused dependencies of the project", dependsOn: ["compile"]) {
  dependency.listUnusedDependencies()
}

target(name: "print-dependency-tree", description: "Prints the dependency tree") {
  dependency.printFull()
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["clean", "int"]) {
  release.release()
}

target(name: "publish", description: "Publish to MVN repo", dependsOn: ["clean", "compile"]) {
  if (new ProcessBuilder('mvn', 'clean', 'deploy', '-Prelease').inheritIO().start().waitFor() != 0) {
    fail("deploy failed")
  }
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "bundle", description: "Builds the project release bundle", dependsOn: ["jar"]) {
  dependency.copy(to: "build/jars") {
    dependencies(group: "compile", transitive: false, fetchSource: true, transitiveGroups: ["compile"])
  }
  file.delete {
    fileSet(dir: "build/jars", includePatterns: [~/.+src\.jar/, ~/-test-/])
  }
  file.zip(file: "build/bundles/fusionauth-java-client-${project.version}.zip") {
    fileSet(dir: "build/jars")
  }
}

target(name: "write-licenses", description: "Write licenses to build/licenses") {
  dependency.writeLicenses(to: "build/licenses")
}